from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import asyncio
import logging
from datetime import datetime
from keyboards import (
    get_main_keyboard, get_rating_keyboard, get_profile_verification_keyboard,
    get_profile_edit, get_moderation_keyboard, get_moderation_profile
)
from database import (
    get_user, create_user, create_profile, get_random_profile,
    create_rating, delete_ex_profiles, get_profile_info, get_user_profile,
    edit_profile, delete_profile, get_user_profile_with_rating,
    verify_profile, reject_profile, get_need_profiles, get_profile_for_moderation,
    verify_profile, reject_profile, mark_profile_as_viewed,
    get_unviewed_profiles_count, get_winner_profile
)

logger = logging.getLogger(__name__)
router = Router()
class ProfileStates(StatesGroup):
    waiting_for_description = State()
    waiting_for_video = State()
    waiting_for_edit_description = State()
    waiting_for_edit_video = State()

class RatingStates(StatesGroup):
    waiting_for_rating = State()
    waiting_for_comment = State()

class ModerationStates(StatesGroup):
    view_profiles = State()

class ProfileViewStates(StatesGroup):
    view_profiles = State()
async def show_profile_for_moderation(message: Message, profile):
    if not profile or not profile.user:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã.")
        return
    
    profile_text = (
        f"üìù –ê–Ω–∫–µ—Ç–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é:\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{profile.user.username}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {profile.description}\n"
        f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {profile.created_at.strftime('%d.%m.%Y %H:%M') if profile.created_at else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
    )
    await message.answer_video(
        video=profile.video_id,
        caption=profile_text,
        reply_markup=get_moderation_profile(profile.id)
    )

async def next_profile(callback: CallbackQuery, state: FSMContext):#moderation
    if callback.from_user.id != *****:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        return
    data = await state.get_data()
    if not data:
        await callback.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    profiles = data['profiles']
    current_index = data['current_index']
    if current_index >= len(profiles)-1:
        await callback.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∞–Ω–∫–µ—Ç–∞")
        await state.clear()
        await callback.message.answer(
            "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n\n"
            "–í—Å–µ –∞–Ω–∫–µ—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_moderation_keyboard()
        )
        return
    current_index += 1
    await state.update_data(current_index=current_index)
    profile = await get_profile_for_moderation(profiles[current_index])
    if profile:
        await callback.message.delete()
        await show_profile_for_moderation(callback.message, profile)
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∫–µ—Ç—ã")

async def show_next_profile(message: Message, state: FSMContext):#clients
    if message.from_user.id == 1653541807:
        is_admin=True
    else:
        is_admin=False
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"DEBUG: show_next_profile –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    profile = await get_random_profile(message.from_user.id)
    if not profile:
        print(f"DEBUG: get_random_profile –≤–µ—Ä–Ω—É–ª None –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        await message.answer(
            "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–æ–ª—å—à–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∫–µ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!",
            reply_markup=get_main_keyboard(is_admin=is_admin)
        )
        await state.clear()
        return
    if not profile.user:
        print(f"DEBUG: profile.user —Ä–∞–≤–µ–Ω None –¥–ª—è profile_id {profile.id}")
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            reply_markup=get_main_keyboard(is_admin=is_admin)
        )
        await state.clear()
        return

    print(f"DEBUG: –ù–∞–π–¥–µ–Ω–∞ –∞–Ω–∫–µ—Ç–∞ profile_id={profile.id}, user_id={profile.user_id}, username={profile.user.username}")

    await state.set_state(ProfileViewStates.view_profiles)
    await state.update_data(current_profile_id=profile.id)
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏
    ratings = profile.received_ratings or []
    avg_rating = round(sum(r.score for r in ratings) / len(ratings), 2) if ratings else 0
    
    profile_text = (
        f"üë§ –ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{profile.user.username}\n\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {profile.description}\n"
        f"‚≠êÔ∏è –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_rating}\n"
        f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: {len(ratings)}"
    )
    if profile.video_id:
        await message.answer_video(
            video=profile.video_id,
            caption=profile_text,
            reply_markup=get_rating_keyboard()
        )
    else:
        await message.answer(
            profile_text,
            reply_markup=get_rating_keyboard()
        )

@router.message(Command('start'))
async def start(message: Message):
    if message.from_user.id == *****::
        is_admin=True
    else:
        is_admin=False
    user = await get_user(message.from_user.id)
    if not user:#–Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –∞–Ω–∫–µ—Ç—ã
        user = await create_user(message.from_user.id, message.from_user.username)
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∞–Ω–∫–µ—Ç! üéâ\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É –∏–ª–∏ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—ã –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                         reply_markup=get_main_keyboard(is_admin=is_admin))

@router.message(F.text == 'üìù –°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É')
async def create_profile_start(message: Message, state: FSMContext):
    if message.from_user.id == *****::
        is_admin=True
    else:
        is_admin=False
    existing_profile = await get_user_profile(message.from_user.id)
    if existing_profile:
        await message.answer(
            "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∫–µ—Ç–∞!\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É (–∫–Ω–æ–ø–∫–∞ 'üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞')\n"
            "‚Ä¢ –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É\n"
            "‚Ä¢ –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é –∞–Ω–∫–µ—Ç—É –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é",
            reply_markup=get_main_keyboard(is_admin=is_admin)
        )
    else:
        await state.set_state(ProfileStates.waiting_for_description)
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã:")

@router.message(ProfileStates.waiting_for_description)
async def process_description(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã.")
        return
    await state.update_data(description=message.text)
    await state.set_state(ProfileStates.waiting_for_video)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã:")

@router.message(ProfileStates.waiting_for_video, F.video)
async def process_video(message: Message, state: FSMContext, bot: Bot):
    if message.from_user.id == *****::
        is_admin=True
    else:
        is_admin=False
    data = await state.get_data()
    if not data or 'description' not in data:
        logger.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏')
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ.')
        await state.clear()
        return

    user = await get_user(message.from_user.id)
    if not user:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã: {message.from_user.id}")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        await state.clear()
        return

    video = message.video
    if not video:
        logger.error("–û–±—ä–µ–∫—Ç –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ.")
        return

    if video.file_size > 50*1024*1024 or video.duration > 240:
        await message.answer(
            "‚ö†Ô∏è –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∏–ª–∏ –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50 –ú–ë –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 4 –º–∏–Ω—É—Ç—ã\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ."
        )
        return

    video_id = video.file_id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω file_id –≤–∏–¥–µ–æ: {video_id}, —Ç–∏–ø: {type(video_id)}")
    # if hasattr(video, 'thumbnail') and video.thumbnail:
    #     photo_id = video.thumbnail.file_id
    if not video_id:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å file_id –∏–∑ –≤–∏–¥–µ–æ")
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ."
        )
        return

    profile = await create_profile(
        user_id=user.id,
        description=data['description'],
        video_id=video_id,
    )
    if profile:
        delete_at, days = await get_profile_info(profile.id)
        if delete_at:
            date_str = delete_at.strftime('%d.%m.%Y %H:%M')
        else:
            date_str = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        await state.clear()

        await message.answer(
            "–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é! "
            f"–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ –ª–µ–Ω—Ç–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏.\n\n"
            f"‚ö†Ô∏è –ê–Ω–∫–µ—Ç–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ {days} –¥–Ω–µ–π",
            reply_markup=get_main_keyboard(is_admin=is_admin)
        )

        admin_message = (
            f"üìù –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é:\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        await bot.send_video(chat_id='1653541807',
                             video=video_id,
                             caption=admin_message, reply_markup=get_profile_verification_keyboard(profile.id)
        )
    else:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard(is_admin=is_admin)
        )
@router.message(F.text=="üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞")
async def show_profile(message: Message):
    if message.from_user.id == *****::
        is_admin=True
    else:
        is_admin=False
    user = await get_user(message.from_user.id)
    profile = await get_user_profile(message.from_user.id)
    if not profile or not user:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã.\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –µ—ë, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É 'üìù –°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É'",
            reply_markup=get_main_keyboard(is_admin=is_admin)
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    if not profile.user:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            reply_markup=get_main_keyboard(is_admin=is_admin)
        )
        return
    
    delete_at, days = await get_profile_info(profile.id)
    ratings = profile.received_ratings or []
    avg_rating = sum(r.score for r in ratings)/len(ratings) if ratings else 0
    status_text = "‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞" if profile.is_verified else "‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
    profile_text = (
        f"üë§ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞: {profile.user.username}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {profile.description}\n"
        f"‚≠êÔ∏è –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {round(avg_rating, 1)}\n"
        f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: {len(ratings)}\n"
        f"‚è≥ –î–Ω–µ–π –¥–æ —É–¥–∞–ª–µ–Ω–∏—è: {days}\n"
        f"üóì –î–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∏—è: {delete_at.strftime('%d.%m.%Y %H:%M') if delete_at else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
    )

    if profile.video_id and profile.video_id.strip():
        await message.answer_video(video=profile.video_id, caption=profile_text, reply_markup=get_profile_edit())
    else:
        logger.info("–ù–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
        await message.answer(
            profile_text,
            reply_markup=get_profile_edit()
        )

@router.callback_query(F.data == 'edit_profile')
async def edit_profile_state(callback: CallbackQuery, state: FSMContext):
    profile = await get_user_profile_with_rating(callback.from_user.id)
    if not profile:
        await callback.answer("–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    await state.set_state(ProfileStates.waiting_for_edit_description)
    await state.update_data(profile_id=profile.id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∞–Ω–∫–µ—Ç—ã:")

@router.message(ProfileStates.waiting_for_edit_description)
async def process_edit_description(message: Message, state: FSMContext):
    data = await state.get_data()
    if not data or 'profile_id' not in data:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return
    await state.update_data(description=message.text)
    await state.set_state(ProfileStates.waiting_for_edit_video)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ –¥–ª—è –∞–Ω–∫–µ—Ç—ã (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ):")

@router.message(ProfileStates.waiting_for_edit_video)
async def process_edit_video(message: Message, state: FSMContext, bot: Bot):
    if message.from_user.id == *****::
        is_admin=True
    else:
        is_admin=False
    data = await state.get_data()
    if not data or 'profile_id' not in data or 'description' not in data:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return
    
    profile_id = data['profile_id']
    new_description = data['description']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∏–¥–µ–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    if message.text and message.text.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ –≤–∏–¥–µ–æ
        profile = await edit_profile(
            profile_id=profile_id, description=new_description, video_id=None
        )
    elif message.video:
        video = message.video
        if video.file_size > 50 * 1024 * 1024 or video.duration > 240:
            await message.answer(
                "‚ö†Ô∏è –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∏–ª–∏ –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50 –ú–ë –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 4 –º–∏–Ω—É—Ç—ã\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'."
            )
            return
        video_id = video.file_id
        profile = await edit_profile(
            profile_id=profile_id, description=new_description, video_id=video_id
        )
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ –≤–∏–¥–µ–æ."
        )
        return
    
    if profile:
        admin_message = (
            f"üìù –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∞–Ω–∫–µ—Ç–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é:\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {new_description}\n"
        )
        await bot.send_video(chat_id='*****:', video=profile.video_id, caption=admin_message, reply_markup=get_profile_edit())
        await message.answer('–ê–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é', reply_markup=get_main_keyboard(is_admin=is_admin))
    else:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard(is_admin=is_admin)
        )
    await state.clear()

@router.callback_query(F.data == 'delete_profile')
async def delete_profile_handler(callback: CallbackQuery):
    profile = await get_user_profile_with_rating(callback.from_user.id)
    if not profile:
        await callback.answer("–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    await delete_profile(profile.id)
    await callback.message.answer('–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞')

@router.message(F.text == 'üë®‚Äçüíº –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∞–Ω–∫–µ—Ç')
async def moderation_menu(message: Message):
    if message.from_user.id != *****::
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")
        return
    await message.answer(
        "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_moderation_keyboard()
    )

@router.message(F.text == 'üìã –ê–Ω–∫–µ—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏')
async def show_pending_profiles(message: Message, state: FSMContext):
    if message.from_user.id != 1653541807:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")
        return
    profiles = await get_need_profiles()
    if not profiles:
        await message.answer("–ù–µ—Ç –∞–Ω–∫–µ—Ç, –æ–∂–∏–¥–∞—é—â–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")
        return

    await state.set_state(ModerationStates.view_profiles)
    await state.update_data(profiles=[p.id for p in profiles], current_index=0)
    await show_profile_for_moderation(message, profiles[0])

@router.message(F.text == 'üîô –ù–∞–∑–∞–¥')
async def back_button(message: Message):
    if message.from_user.id == *****::
        is_admin=True
    else:
        is_admin=False
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")
        return
    await message.answer('–í—ã –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=get_main_keyboard(is_admin=is_admin))

@router.callback_query(F.data.startswith('verify_'))
async def verify_profile_handler(callback: CallbackQuery, bot: Bot, state: FSMContext):
    if callback.from_user.id != *****::
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return
    profile_id = int(callback.data.split('_')[1])
    result = await verify_profile(profile_id)
    if result:
        await bot.send_message(chat_id=result['telegram_id'], text="‚úÖ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º!\n"
                     "–¢–µ–ø–µ—Ä—å –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.")
        await callback.answer('–ê–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞')
        await next_profile(callback, state)

@router.callback_query(F.data.startswith('reject_'))
async def reject_profile_handler(callback: CallbackQuery, bot: Bot, state: FSMContext):
    if callback.from_user.id != 1653541807:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return
    profile_id = int(callback.data.split('_')[1])
    result = await reject_profile(profile_id)
    if result:
        await bot.send_message(chat_id=result['telegram_id'], text="‚ùå –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.\n"
                     "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤–∏–ª:\n"
                     "1. –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º\n"
                     "2. –í–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º\n"
                     "3. –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞")
        await callback.message.answer('–ê–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞')
        await next_profile(callback, state)

@router.message(F.text == "üë• –û—Ü–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—ã")
async def start_rating_profiles(message: Message, state: FSMContext):
    if message.from_user.id == *****::
        is_admin=True
    else:
        is_admin=False
    user_profile = await get_user_profile(message.from_user.id)
    if not user_profile:
        await message.answer(
            "–ß—Ç–æ–±—ã –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—ã –¥—Ä—É–≥–∏—Ö, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É!",
            reply_markup=get_main_keyboard(is_admin=is_admin)
        )
        return
    if not user_profile.is_verified:
        await message.answer(
            "–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –µ—â—ë –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—ã –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
            reply_markup=get_main_keyboard(is_admin=is_admin)
        )
        return
    available_count = await get_unviewed_profiles_count(message.from_user.id)
    profile = await get_random_profile(message.from_user.id)
    if not profile:
        await message.answer(
            "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∫–µ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!",
            reply_markup=get_main_keyboard(is_admin=is_admin)
        )
        return
    if not profile.user:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            reply_markup=get_main_keyboard(is_admin=is_admin)
        )
        return
    await state.set_state(ProfileViewStates.view_profiles)
    await state.update_data(current_profile_id=profile.id)
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏
    ratings = profile.received_ratings or []
    avg_rating = round(sum(r.score for r in ratings) / len(ratings), 1) if ratings else 0
    
    profile_text = (
        f"üë§ –ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{profile.user.username}\n\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {profile.description}\n"
        f"‚≠êÔ∏è –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_rating}\n"
        f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: {len(ratings)}"
    )
    if profile.video_id:
        await message.answer_video(video=profile.video_id, caption=profile_text, reply_markup=get_rating_keyboard())
    else:
        await message.answer(
            profile_text, reply_markup=get_rating_keyboard()
        )

@router.callback_query(F.data.startswith('score_'))
async def process_rating_score(callback: CallbackQuery, state: FSMContext):
    print(f"DEBUG: process_rating_score –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    
    if not await state.get_state() == ProfileViewStates.view_profiles:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", show_alert=True)
        return
    score = int(callback.data.split('_')[1])
    data = await state.get_data()
    profile_id = data.get('current_profile_id')
    if not profile_id:
        await callback.answer("–û—à–∏–±–∫–∞: –∞–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    print(f"DEBUG: –°–æ–∑–¥–∞—ë–º –æ—Ü–µ–Ω–∫—É score={score} –¥–ª—è profile_id={profile_id}")
    
    rating = await create_rating(user.id, profile_id, score, None)
    if rating:
        print(f"DEBUG: –û—Ü–µ–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –ø–æ–º–µ—á–∞–µ–º –∞–Ω–∫–µ—Ç—É –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–π")
        await mark_profile_as_viewed(callback.from_user.id, profile_id)
        await callback.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!")
        await callback.message.delete()
        print(f"DEBUG: –í—ã–∑—ã–≤–∞–µ–º show_next_profile")
        await show_next_profile(callback.message, state)
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏", show_alert=True)

@router.message(F.text == 'üéâ –ö—Ç–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å?')
async def show_winner(message: Message):
    if message.from_user.id != *****::
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")
        return
    winner = await get_winner_profile()
    if not winner or not winner.user:
        await message.answer("–ù–µ—Ç –∞–Ω–∫–µ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.")
        return
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏
    ratings = winner.received_ratings or []
    avg_rating = sum(r.score for r in ratings) / len(ratings) if ratings else 0
    
    profile_text = (
        f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å!\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{winner.user.username}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {winner.description}\n"
        f"‚≠êÔ∏è –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {round(avg_rating, 2)}\n"
        f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: {len(ratings)}"
    )
    if winner.video_id:
        await message.answer_video(video=winner.video_id, caption=profile_text)
    else:
        await message.answer(profile_text)






















































