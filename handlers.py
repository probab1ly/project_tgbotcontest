from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import asyncio
import logging
from datetime import datetime
from keyboards import (
    get_main_keyboard, get_rating_keyboard, get_profile_verification_keyboard,
    get_profile_edit, get_moderation_keyboard, get_moderation_profile
)
from database import (
    get_user, create_user, create_profile, get_random_profile,
    create_rating, delete_ex_profiles, get_profile_info, get_user_profile,
    edit_profile, delete_profile, get_user_profile_with_rating,
    verify_profile, reject_profile, get_need_profiles, get_profile_for_moderation,
    verify_profile, reject_profile, mark_profile_as_viewed,
    get_unviewed_profiles_count, get_winner_profile
)
from typing import Callable, Awaitable
import time

# # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à: (user_id, media_group_id) -> timestamp
# warned_media_groups_cache = {}

# def cleanup_warned_cache(ttl=60):
#     now = time.time()
#     to_delete = [key for key, t in warned_media_groups_cache.items() if now - t > ttl]
#     for key in to_delete:
#         del warned_media_groups_cache[key]

# async def warn_once_for_media_group(message: Message, warn_text: str, ttl=60) -> bool:
#     if message.media_group_id is not None:
#         cleanup_warned_cache(ttl)
#         key = (message.from_user.id, message.media_group_id)
#         if key in warned_media_groups_cache:
#             return True
#         await message.answer(warn_text)
#         warned_media_groups_cache[key] = time.time()
#         return True
#     return False

logger = logging.getLogger(__name__)
router = Router()

def get_display_username(username: str | None) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç username –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if username:
        return f"@{username}"
    return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ username"

# Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: caption –¥–æ ~1024 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–µ–∫—Å—Ç –¥–æ ~4096
CAPTION_LIMIT = 1000
TEXT_LIMIT = 4000

def truncate_text(text: str, max_length: int) -> str:
    if not text:
        return ""
    if len(text) <= max_length:
        return text
    return text[: max_length - 3] + "..."

def build_profile_text_for_caption(lines: list[str], for_caption: bool = True) -> str:
    # –°–∫–ª–µ–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∏ –æ–±—Ä–µ–∑–∞–µ–º –ø–æ–¥ –ª–∏–º–∏—Ç
    text = "".join(lines)
    limit = CAPTION_LIMIT if for_caption else TEXT_LIMIT
    return truncate_text(text, limit)

class ProfileStates(StatesGroup):
    waiting_for_description = State()
    waiting_for_category = State()
    waiting_for_video = State()
    waiting_for_edit_description = State()
    waiting_for_edit_category = State()
    waiting_for_edit_video = State()

class RatingStates(StatesGroup):
    waiting_for_rating = State()
    waiting_for_comment = State()

class ModerationStates(StatesGroup):
    view_profiles = State()

class ProfileViewStates(StatesGroup):
    view_profiles = State()

async def show_profile_for_moderation(message: Message, profile_id):
    profile = await get_profile_for_moderation(profile_id)
    if not profile or not profile.user:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã.")
        return
    
    profile_text = (
        f"üìù –ê–Ω–∫–µ—Ç–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é:\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {get_display_username(profile.user.username)}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {profile.description}\n"
        f"‚ú® –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {profile.category}\n"
        f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {profile.created_at.strftime('%d.%m.%Y %H:%M') if profile.created_at else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
    )
    if profile.video_id:
        await message.answer_video(
            video=profile.video_id,
            caption=profile_text,
            reply_markup=get_moderation_profile(profile.id)
        )
    elif profile.photo_id:
        await message.answer_photo(
            photo=profile.photo_id,
            caption=profile_text,
            reply_markup=get_moderation_profile(profile.id)
        )
    else:
        await message.answer(
            profile_text,
            reply_markup=get_moderation_profile(profile.id)
        )

async def next_profile(callback: CallbackQuery, state: FSMContext):#moderation
    if callback.from_user.id != 1653541807:
        await callback.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        return
    data = await state.get_data()
    if not data:
        await callback.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    profiles = data['profiles']
    current_index = data['current_index']
    if current_index >= len(profiles)-1:
        await callback.answer("‚ùóÔ∏è –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∞–Ω–∫–µ—Ç–∞")
        await state.clear()
        await callback.message.answer(
            "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n\n"
            "–í—Å–µ –∞–Ω–∫–µ—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_moderation_keyboard()
        )
        return
    current_index += 1
    await state.update_data(current_index=current_index)
    profile_id = profiles[current_index]
    await callback.message.delete()
    await show_profile_for_moderation(callback.message, profile_id)

async def show_next_profile(message: Message, state: FSMContext, user_id: int = None):#clients
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∏–ª–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è)
    telegram_id = user_id if user_id is not None else message.from_user.id
    is_admin = telegram_id == 1653541807
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"DEBUG: show_next_profile –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
    
    profile = await get_random_profile(telegram_id)
    if not profile:
        print(f"DEBUG: get_random_profile –≤–µ—Ä–Ω—É–ª None –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        await message.answer(
            "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–æ–ª—å—à–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∫–µ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!",
            reply_markup=get_main_keyboard(is_admin=is_admin)
        )
        await state.clear()
        return
    if not profile.user:
        print(f"DEBUG: profile.user —Ä–∞–≤–µ–Ω None –¥–ª—è profile_id {profile.id}")
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            reply_markup=get_main_keyboard(is_admin=is_admin)
        )
        await state.clear()
        return

    print(f"DEBUG: –ù–∞–π–¥–µ–Ω–∞ –∞–Ω–∫–µ—Ç–∞ profile_id={profile.id}, user_id={profile.user_id}, username={get_display_username(profile.user.username)}")

    await state.set_state(ProfileViewStates.view_profiles)
    await state.update_data(current_profile_id=profile.id)
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏
    ratings = profile.received_ratings
    if not ratings:
        ratings = []
    elif not isinstance(ratings, list):
        ratings = [ratings]
    avg_rating = round(sum(r.score for r in ratings) / len(ratings), 2) if ratings else 0
    
    profile_text = build_profile_text_for_caption([
        f"üë§ –ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {get_display_username(profile.user.username)}\n\n",
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {profile.description}\n",
        f"‚ú® –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {profile.category}\n",
        f"‚≠êÔ∏è –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_rating}\n",
        f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: {len(ratings)}"
    ], for_caption=True)
    if profile.video_id:
        await message.answer_video(
            video=profile.video_id,
            caption=profile_text,
            reply_markup=get_rating_keyboard()
        )
    elif profile.photo_id:
        await message.answer_photo(
            photo=profile.photo_id,
            caption=profile_text,
            reply_markup=get_rating_keyboard()
        )
    else:
        await message.answer(
            profile_text,
            reply_markup=get_rating_keyboard()
        )

@router.message(Command('start'))
async def start(message: Message):
    if message.from_user.id == 1653541807:
        is_admin=True
    else:
        is_admin=False
    user = await get_user(message.from_user.id)
    if not user: # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –∞–Ω–∫–µ—Ç—ã
        user = await create_user(message.from_user.id, message.from_user.username)
    welcome = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∞–Ω–∫–µ—Ç! üéâ\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É –∏–ª–∏ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—ã –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
        "–í –∞–Ω–∫–µ—Ç–∞—Ö –º—ã –º–æ–∂–µ—Ç–µ –¥–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ –æ–¥–Ω–æ–π –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç–µ–º–∞—Ç–∏–∫, –∞ —Ç–∞–∫–∂–µ —Å–∞–º–∏–º –Ω–∞–π—Ç–∏ —Å–æ–≤–µ—Ç—ã –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–º –≤–∞—Å –≤–æ–ø—Ä–æ—Å–∞–º"
    )
    await message.answer(welcome, reply_markup=get_main_keyboard(is_admin=is_admin))

@router.message(F.text == 'üìù –°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É')
async def create_profile_start(message: Message, state: FSMContext):
    if message.from_user.id == 1653541807:
        is_admin=True
    else:
        is_admin=False

    existing_profile = await get_user_profile(message.from_user.id)
    if existing_profile:
        await message.answer(
            "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∫–µ—Ç–∞!\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É (–∫–Ω–æ–ø–∫–∞ 'üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞')\n"
            "‚Ä¢ –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É\n"
            "‚Ä¢ –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é –∞–Ω–∫–µ—Ç—É –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é",
            reply_markup=get_main_keyboard(is_admin=is_admin)
        )
    else:
        await state.set_state(ProfileStates.waiting_for_category)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞—à–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ–º:\n"
            "üéÆ –ò–≥—Ä—ã\n"
            "üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
            "üç≤ –ö—É–ª–∏–Ω–∞—Ä–∏—è\n"
            "üñº –ò—Å–∫—É—Å—Å—Ç–≤–æ\n"
            "‚ú® –ñ–∏–∑–Ω—å\n"
            "üíº –ë–∏–∑–Ω–µ—Å"
        )

@router.message(ProfileStates.waiting_for_description)
async def process_description(message: Message, state: FSMContext):
    if not message.text or message.content_type != 'text':
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã (–Ω–µ —Ñ–æ—Ç–æ, –Ω–µ –≤–∏–¥–µ–æ, –Ω–µ —Ñ–∞–π–ª). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    await state.update_data(description=message.text)
    await state.set_state(ProfileStates.waiting_for_video)
    await message.answer("üì∑ –•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –∏–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', –µ—Å–ª–∏ –Ω–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤)")

@router.message(ProfileStates.waiting_for_category)
async def process_category(message: Message, state: FSMContext):
    if not message.text or message.text.lower() not in ['–∏–≥—Ä—ã', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–∫—É–ª–∏–Ω–∞—Ä–∏—è', '–∏—Å–∫—É—Å—Å—Ç–≤–æ', '–±–∏–∑–Ω–µ—Å', '–∂–∏–∑–Ω—å']:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã")
        return
    await state.update_data(category=message.text)
    await state.set_state(ProfileStates.waiting_for_description)
    await message.answer("‚úçÔ∏è –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã")

@router.message(ProfileStates.waiting_for_video, F.video)
async def process_video(message: Message, state: FSMContext, bot: Bot):
    if message.media_group_id is not None:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –≤–∏–¥–µ–æ –¥–ª—è –∞–Ω–∫–µ—Ç—ã")
        return
    if message.from_user.id == 1653541807:
        is_admin=True
    else:
        is_admin=False
    data = await state.get_data()
    if not data or 'description' not in data:
        logger.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏')
        await message.answer('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ')
        await state.clear()
        return

    user = await get_user(message.from_user.id)
    if not user:
        user = await create_user(message.from_user.id, message.from_user.username)
    
    video = message.video
    if not video:
        logger.error("–û–±—ä–µ–∫—Ç –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ")
        return

    if video.file_size > 50*1024*1024 or video.duration > 240:
        await message.answer(
            "‚ö†Ô∏è –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∏–ª–∏ –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50 –ú–ë –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 4 –º–∏–Ω—É—Ç—ã\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ"
        )
        return

    video_id = video.file_id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω file_id –≤–∏–¥–µ–æ: {video_id}, —Ç–∏–ø: {type(video_id)}")
    # if hasattr(video, 'thumbnail') and video.thumbnail:
    #     photo_id = video.thumbnail.file_id
    if not video_id:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å file_id –∏–∑ –≤–∏–¥–µ–æ")
        await message.answer(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ"
        )
        return

    profile = await create_profile(
        user_id=user.id,
        description=data['description'],
        category=data['category'],
        video_id=video_id,
        photo_id=None
    )
    if profile:
        delete_at, days = await get_profile_info(profile.id)
        if delete_at:
            date_str = delete_at.strftime('%d.%m.%Y %H:%M')
        else:
            date_str = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        await state.update_data(warned_media_groups=[])
        await state.clear()

        await message.answer(
            "–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é! "
            f"–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ –ª–µ–Ω—Ç–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏.\n\n"
            f"‚ö†Ô∏è –ê–Ω–∫–µ—Ç–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ {days} –¥–Ω–µ–π",
            reply_markup=get_main_keyboard(is_admin=is_admin)
        )

        admin_message = (
            f"üìù –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é:\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {get_display_username(message.from_user.username)}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
            f"‚ú® –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {profile.category}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        await bot.send_video(chat_id='1653541807',video=video_id,caption=admin_message, reply_markup=get_profile_verification_keyboard(profile.id))
    else:
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
            reply_markup=get_main_keyboard(is_admin=is_admin)
        )

@router.message(ProfileStates.waiting_for_video, F.photo)
async def process_photo(message: Message, state: FSMContext, bot: Bot):
    if message.media_group_id is not None:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –≤–∏–¥–µ–æ –¥–ª—è –∞–Ω–∫–µ—Ç—ã")
        return
    if message.from_user.id == 1653541807:
        is_admin=True
    else:
        is_admin=False
    data = await state.get_data()
    if not data or 'description' not in data or 'category' not in data:
        logger.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏')
        await message.answer('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ')
        await state.clear()
        return

    user = await get_user(message.from_user.id)
    if not user:
        user = await create_user(message.from_user.id, message.from_user.username)
    
    photo = message.photo[-1]
    if not photo:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑(–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å')")
        return

    photo_id = photo.file_id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω file_id —Ñ–æ—Ç–æ: {photo_id}, —Ç–∏–ø: {type(photo_id)}")
    # if hasattr(video, 'thumbnail') and video.thumbnail:
    #     photo_id = video.thumbnail.file_id
    if not photo_id:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å file_id –∏–∑ —Ñ–æ—Ç–æ")
        await message.answer(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ"
        )
        return

    profile = await create_profile(
        user_id=user.id,
        description=data['description'],
        category=data['category'],
        video_id=None,
        photo_id=photo_id
    )
    if profile:
        delete_at, days = await get_profile_info(profile.id)
        if delete_at:
            date_str = delete_at.strftime('%d.%m.%Y %H:%M')
        else:
            date_str = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        await state.update_data(warned_media_groups=[])
        await state.clear()

        await message.answer(
            "–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é! "
            f"–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ –ª–µ–Ω—Ç–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏.\n\n"
            f"‚ö†Ô∏è –ê–Ω–∫–µ—Ç–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ {days} –¥–Ω–µ–π",
            reply_markup=get_main_keyboard(is_admin=is_admin)
        )

        admin_message = (
            f"üìù –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é:\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {get_display_username(message.from_user.username)}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
            f"‚ú® –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {profile.category}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        await bot.send_photo(chat_id='1653541807', photo=photo_id, caption=admin_message, reply_markup=get_profile_verification_keyboard(profile.id))
    else:
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
            reply_markup=get_main_keyboard(is_admin=is_admin)
        )
@router.message(ProfileStates.waiting_for_video, F.text.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
async def process_skip_media(message: Message, state: FSMContext, bot: Bot):
    if message.from_user.id == 1653541807:
        is_admin=True
    else:
        is_admin=False
    data = await state.get_data()
    if not data or 'description' not in data or 'category' not in data:
        logger.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏')
        await message.answer('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ')
        await state.clear()
        return

    user = await get_user(message.from_user.id)
    if not user:
        user = await create_user(message.from_user.id, message.from_user.username)
    
    profile = await create_profile(
        user_id=user.id,
        description=data['description'],
        category=data['category'],
        video_id=None,
        photo_id=None
    )
    if profile:
        delete_at, days = await get_profile_info(profile.id)
        if delete_at:
            date_str = delete_at.strftime('%d.%m.%Y %H:%M')
        else:
            date_str = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        await state.update_data(warned_media_groups=[])
        await state.clear()

        await message.answer(
            "–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é! "
            f"–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ –ª–µ–Ω—Ç–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏.\n\n"
            f"‚ö†Ô∏è –ê–Ω–∫–µ—Ç–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ {days} –¥–Ω–µ–π",
            reply_markup=get_main_keyboard(is_admin=is_admin)
        )

        admin_message = (
            f"üìù –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é:\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {get_display_username(message.from_user.username)}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
            f"‚ú® –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {profile.category}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        await bot.send_message(chat_id='1653541807', text=admin_message, reply_markup=get_profile_verification_keyboard(profile.id))
    else:
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
            reply_markup=get_main_keyboard(is_admin=is_admin)
        )

# @router.message(ProfileStates.waiting_for_video)
# async def process_invalid_media(message: Message):
#     await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ, —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")

@router.message(F.text=="üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞")
async def show_profile(message: Message):
    if message.from_user.id == 1653541807:
        is_admin=True
    else:
        is_admin=False
    user = await get_user(message.from_user.id)
    profile = await get_user_profile(message.from_user.id)
    if not profile or not user:
        await message.answer(
            "‚ö†Ô∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã.\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –µ—ë, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É 'üìù –°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É'",
            reply_markup=get_main_keyboard(is_admin=is_admin)
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    if not profile.user:
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            reply_markup=get_main_keyboard(is_admin=is_admin)
        )
        return
    
    delete_at, days = await get_profile_info(profile.id)
    ratings = profile.received_ratings
    if not ratings:
        ratings = []
    elif not isinstance(ratings, list):
        ratings = [ratings]
    avg_rating = sum(r.score for r in ratings)/len(ratings) if ratings else 0
    status_text = "‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞" if profile.is_verified else "‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
    profile_text = (
        f"üë§ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞: {get_display_username(profile.user.username)}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {profile.description}\n"
        f"‚ú® –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {profile.category}\n"
        f"‚≠êÔ∏è –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {round(avg_rating, 1)}\n"
        f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: {len(ratings)}\n"
        f"‚è≥ –î–Ω–µ–π –¥–æ —É–¥–∞–ª–µ–Ω–∏—è: {days}\n"
        f"üóì –î–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∏—è: {delete_at.strftime('%d.%m.%Y %H:%M') if delete_at else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
    )

    if profile.video_id and profile.video_id.strip():
        await message.answer_video(video=profile.video_id, caption=profile_text, reply_markup=get_profile_edit())
    elif profile.photo_id and profile.photo_id.strip():
        await message.answer_photo(photo=profile.photo_id, caption=profile_text, reply_markup=get_profile_edit())
    else:
        logger.info("–ù–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
        await message.answer(
            profile_text,
            reply_markup=get_profile_edit()
        )

@router.callback_query(F.data == 'edit_profile')
async def edit_profile_state(callback: CallbackQuery, state: FSMContext):
    profile = await get_user_profile_with_rating(callback.from_user.id)
    if not profile:
        await callback.answer("‚ö†Ô∏è –ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    await state.set_state(ProfileStates.waiting_for_edit_category)
    await state.update_data(profile_id=profile.id)
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã:\n"
        "üéÆ –ò–≥—Ä—ã\n"
        "üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
        "üç≤ –ö—É–ª–∏–Ω–∞—Ä–∏—è\n"
        "üñº –ò—Å–∫—É—Å—Å—Ç–≤–æ\n"
        "‚ú® –ñ–∏–∑–Ω—å\n"
        "üíº –ë–∏–∑–Ω–µ—Å"
    )

@router.message(ProfileStates.waiting_for_edit_category)
async def process_edit_category(message: Message, state: FSMContext):
    if not message.text or message.text.lower() not in ['–∏–≥—Ä—ã', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–∫—É–ª–∏–Ω–∞—Ä–∏—è', '–∏—Å–∫—É—Å—Å—Ç–≤–æ', '–±–∏–∑–Ω–µ—Å', '–∂–∏–∑–Ω—å']:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã")
        return
    data = await state.get_data()
    if not data or 'profile_id' not in data:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return
    await state.update_data(category=message.text)
    await state.set_state(ProfileStates.waiting_for_edit_description)
    await message.answer("‚úçÔ∏è –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã:")

@router.message(ProfileStates.waiting_for_edit_description)
async def process_edit_description(message: Message, state: FSMContext):
    data = await state.get_data()
    if not message.text or message.content_type != "text":
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã (–Ω–µ —Ñ–æ—Ç–æ, –Ω–µ –≤–∏–¥–µ–æ, –Ω–µ —Ñ–∞–π–ª). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    
    if not data or 'profile_id' not in data:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        await state.clear()
        return
    
    await state.update_data(description=message.text)
    await state.set_state(ProfileStates.waiting_for_edit_video)
    await message.answer("üì∑ –•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ –∏–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∫–µ—Ç—ã(–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ –≤–∏–¥–µ–æ)")

@router.message(ProfileStates.waiting_for_edit_video, F.video)
async def process_edit_video(message: Message, state: FSMContext, bot: Bot):
    if message.media_group_id is not None:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –≤–∏–¥–µ–æ –¥–ª—è –∞–Ω–∫–µ—Ç—ã")
        return
    if message.from_user.id == 1653541807:
        is_admin=True
    else:
        is_admin=False

    data = await state.get_data()
    if not data or 'profile_id' not in data or 'description' not in data or 'category' not in data:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return
    
    profile_id = data['profile_id']
    new_description = data['description']
    new_category = data['category']
    
    video = message.video
    if video.file_size > 50 * 1024 * 1024 or video.duration > 240:
        await message.answer(
            "‚ö†Ô∏è –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∏–ª–∏ –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50 –ú–ë –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 4 –º–∏–Ω—É—Ç—ã\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'"
        )
        return
    video_id = video.file_id
    profile = await edit_profile(
        profile_id=profile_id, description=new_description, category=new_category, video_id=video_id, photo_id=None
    )   
    
    if profile:
        admin_message = (
            f"üìù –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∞–Ω–∫–µ—Ç–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é:\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {get_display_username(message.from_user.username)}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {new_description}\n"
            f"üìù –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {new_category}\n"
        )
        await bot.send_video(chat_id='1653541807', video=profile.video_id, caption=admin_message, reply_markup=get_profile_verification_keyboard(profile.id))
        await message.answer('‚úÖ –ê–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é', reply_markup=get_main_keyboard(is_admin=is_admin))
    else:
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard(is_admin=is_admin)
        )
    await state.update_data(warned_media_groups=[])
    await state.clear()

@router.message(ProfileStates.waiting_for_edit_video, F.photo)
async def process_edit_photo(message: Message, state: FSMContext, bot: Bot):
    if message.media_group_id is not None:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –≤–∏–¥–µ–æ –¥–ª—è –∞–Ω–∫–µ—Ç—ã")
        return
    if message.from_user.id == 1653541807:
        is_admin=True
    else:
        is_admin=False

    data = await state.get_data()
    if not data or 'profile_id' not in data or 'description' not in data or 'category' not in data:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return
    
    profile_id = data['profile_id']
    new_description = data['description']
    new_category = data['category']

    photo = message.photo[-1]
    photo_id = photo.file_id
    profile = await edit_profile(
        profile_id=profile_id, description=new_description, category=new_category, photo_id=photo_id, video_id=None
    )
    
    if profile:
        admin_message = (
            f"üìù –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∞–Ω–∫–µ—Ç–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é:\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {get_display_username(message.from_user.username)}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {new_description}\n"
            f"üìù –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {new_category}\n"
        )
        await bot.send_photo(chat_id='1653541807', photo=profile.photo_id, caption=admin_message, reply_markup=get_profile_verification_keyboard(profile.id))
        await message.answer('‚úÖ –ê–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é', reply_markup=get_main_keyboard(is_admin=is_admin))
    else:
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard(is_admin=is_admin)
        )
    await state.update_data(warned_media_groups=[])
    await state.clear()

@router.message(ProfileStates.waiting_for_edit_video, F.text.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
async def process_skip_media(message: Message, state: FSMContext, bot: Bot):
    if message.from_user.id == 1653541807:
        is_admin=True
    else:
        is_admin=False
    data = await state.get_data()
    if not data or 'description' not in data or 'category' not in data:
        logger.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏')
        await message.answer('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ')
        await state.clear()
        return

    user = await get_user(message.from_user.id)
    if not user:
        user = await create_user(message.from_user.id, message.from_user.username)
    
    profile = await create_profile(
        user_id=user.id,
        description=data['description'],
        category=data['category'],
        video_id=None,
        photo_id=None
    )
    if profile:
        delete_at, days = await get_profile_info(profile.id)
        if delete_at:
            date_str = delete_at.strftime('%d.%m.%Y %H:%M')
        else:
            date_str = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        await state.update_data(warned_media_groups=[])
        await state.clear()

        await message.answer(
            "–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é! "
            f"–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ –ª–µ–Ω—Ç–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏.\n\n"
            f"‚ö†Ô∏è –ê–Ω–∫–µ—Ç–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ {days} –¥–Ω–µ–π",
            reply_markup=get_main_keyboard(is_admin=is_admin)
        )

        admin_message = (
            f"üìù –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é:\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {get_display_username(message.from_user.username)}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
            f"‚ú® –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {profile.category}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        await bot.send_message(chat_id='1653541807', text=admin_message, reply_markup=get_profile_verification_keyboard(profile.id))
    else:
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
            reply_markup=get_main_keyboard(is_admin=is_admin)
        )

# @router.callback_query(F.data == 'delete_profile')
# async def delete_profile_handler(callback: CallbackQuery):
#     profile = await get_user_profile_with_rating(callback.from_user.id)
#     if not profile:
#         await callback.answer("‚ö†Ô∏è –ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
#         return
#     await delete_profile(profile.id)
#     await callback.message.answer('‚úÖ –ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞')

@router.message(F.text == 'üë®‚Äçüíº –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∞–Ω–∫–µ—Ç')
async def moderation_menu(message: Message):
    if message.from_user.id != 1653541807:
        await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")
        return
    await message.answer(
        "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_moderation_keyboard()
    )

@router.message(F.text == 'üìã –ê–Ω–∫–µ—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏')
async def show_pending_profiles(message: Message, state: FSMContext):
    if message.from_user.id != 1653541807:
        await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")
        return
    profiles = await get_need_profiles()
    if not profiles:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –∞–Ω–∫–µ—Ç, –æ–∂–∏–¥–∞—é—â–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")
        return

    await state.set_state(ModerationStates.view_profiles)
    await state.update_data(profiles=[p.id for p in profiles], current_index=0)
    await show_profile_for_moderation(message, profiles[0].id)

@router.message(F.text == 'üîô –ù–∞–∑–∞–¥')
async def back_button(message: Message):
    if message.from_user.id == 1653541807:
        is_admin=True
    else:
        is_admin=False
        await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")
        return
    await message.answer('‚Ü©Ô∏è –í—ã –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=get_main_keyboard(is_admin=is_admin))

@router.callback_query(F.data.startswith('verify_'))
async def verify_profile_handler(callback: CallbackQuery, bot: Bot, state: FSMContext):
    if callback.from_user.id != 1653541807:
        await callback.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return
    profile_id = int(callback.data.split('_')[1])
    result = await verify_profile(profile_id)
    if result:
        await bot.send_message(chat_id=result['telegram_id'], text="‚úÖ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º!\n–¢–µ–ø–µ—Ä—å –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.")
        await callback.answer('‚úÖ –ê–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞')
        await next_profile(callback, state)

@router.callback_query(F.data.startswith('reject_'))
async def reject_profile_handler(callback: CallbackQuery, bot: Bot, state: FSMContext):
    if callback.from_user.id != 1653541807:
        await callback.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return
    profile_id = int(callback.data.split('_')[1])
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–æ —É–¥–∞–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å telegram_id
    profile = await get_profile_for_moderation(profile_id)
    if not profile or not profile.user:
        await callback.answer("‚ö†Ô∏è –ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    telegram_id = profile.user.telegram_id
    result = await reject_profile(profile_id)
    if result:
        await bot.send_message(
            chat_id=telegram_id,
            text="‚ùå –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤–∏–ª:\n"
                 "1. –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º\n"
                 "2. –í–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º\n"
                 "3. –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞"
        )
        await callback.message.answer('–ê–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞')
        await next_profile(callback, state)

@router.message(F.text == "üë• –û—Ü–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—ã")
async def start_rating_profiles(message: Message, state: FSMContext):
    if message.from_user.id == 1653541807:
        is_admin=True
    else:
        is_admin=False
    user_profile = await get_user_profile(message.from_user.id)
    if not user_profile:
        await message.answer(
            "‚ùóÔ∏è –ß—Ç–æ–±—ã –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—ã –¥—Ä—É–≥–∏—Ö, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É",
            reply_markup=get_main_keyboard(is_admin=is_admin)
        )
        return
    if not user_profile.is_verified:
        await message.answer(
            "‚ö†Ô∏è –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –µ—â—ë –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—ã –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
            reply_markup=get_main_keyboard(is_admin=is_admin)
        )
        return
    available_count = await get_unviewed_profiles_count(message.from_user.id)
    profile = await get_random_profile(message.from_user.id)
    if not profile:
        await message.answer(
            "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∫–µ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!",
            reply_markup=get_main_keyboard(is_admin=is_admin)
        )
        return
    if not profile.user:
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            reply_markup=get_main_keyboard(is_admin=is_admin)
        )
        return
    await state.set_state(ProfileViewStates.view_profiles)
    await state.update_data(current_profile_id=profile.id)
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏
    ratings = profile.received_ratings
    if not ratings:
        ratings = []
    elif not isinstance(ratings, list):
        ratings = [ratings]
    avg_rating = round(sum(r.score for r in ratings) / len(ratings), 1) if ratings else 0
    
    profile_text = build_profile_text_for_caption([
        # f"üë§ –ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {get_display_username(profile.user.username)}\n\n",
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {profile.description}\n",
        f"‚ú® –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {profile.category}\n",
        f"‚≠êÔ∏è –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_rating}\n",
        f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: {len(ratings)}"
    ], for_caption=True)
    if profile.video_id:
        await message.answer_video(
            video=profile.video_id, 
            caption=profile_text, 
            reply_markup=get_rating_keyboard()
        )
    elif profile.photo_id:
        await message.answer_photo(
            photo=profile.photo_id, 
            caption=profile_text, 
            reply_markup=get_rating_keyboard()
        )
    else:
        await message.answer(
            profile_text, 
            reply_markup=get_rating_keyboard()
        )

@router.callback_query(F.data.startswith('score_'))
async def process_rating_score(callback: CallbackQuery, state: FSMContext, bot: Bot):
    print(f"DEBUG: process_rating_score –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    
    if not await state.get_state() == ProfileViewStates.view_profiles:
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", show_alert=True)
        return
    score = int(callback.data.split('_')[1])
    data = await state.get_data()
    profile_id = data.get('current_profile_id')
    if not profile_id:
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –∞–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    print(f"DEBUG: –°–æ–∑–¥–∞—ë–º –æ—Ü–µ–Ω–∫—É score={score} –¥–ª—è profile_id={profile_id}")
    
    rating = await create_rating(user.id, profile_id, score, None)
    if rating:
        print(f"DEBUG: –û—Ü–µ–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –ø–æ–º–µ—á–∞–µ–º –∞–Ω–∫–µ—Ç—É –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–π")
        await mark_profile_as_viewed(callback.from_user.id, profile_id)
        await callback.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–π –∞–Ω–∫–µ—Ç–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        user_telegram_id = callback.from_user.id
        profile = await get_random_profile(user_telegram_id)
        
        # await callback.message.delete()
        print(f"DEBUG:f –í—ã–∑—ã–≤–∞–µ–º show_next_profile")
        
        if not profile:
            print(f"DEBUG: get_random_profile –≤–µ—Ä–Ω—É–ª None –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id}")
            is_admin = user_telegram_id == 1653541807
            await bot.send_message(
                chat_id=user_telegram_id,
                text="üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–æ–ª—å—à–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∫–µ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏.\n"
                     "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!",
                reply_markup=get_main_keyboard(is_admin=is_admin)
            )
            await state.clear()
            return
        
        if not profile.user:
            print(f"DEBUG: profile.user —Ä–∞–≤–µ–Ω None –¥–ª—è profile_id {profile.id}")
            is_admin = user_telegram_id == 1653541807
            await bot.send_message(
                chat_id=user_telegram_id,
                text="‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                reply_markup=get_main_keyboard(is_admin=is_admin)
            )
            await state.clear()
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É
        await state.set_state(ProfileViewStates.view_profiles)
        await state.update_data(current_profile_id=profile.id)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏
        ratings = profile.received_ratings
        if not ratings:
            ratings = []
        elif not isinstance(ratings, list):
            ratings = [ratings]
        avg_rating = round(sum(r.score for r in ratings) / len(ratings), 2) if ratings else 0
        
        profile_text = build_profile_text_for_caption([
            # f"üë§ –ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {get_display_username(profile.user.username)}\n\n",
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {profile.description}\n",
            f"‚ú® –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {profile.category}\n",
            f"‚≠êÔ∏è –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_rating}\n",
            f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: {len(ratings)}"
        ], for_caption=True)
        
        is_admin = user_telegram_id == 1653541807
        
        if profile.video_id:
            await bot.send_video(
                chat_id=user_telegram_id,
                video=profile.video_id,
                caption=profile_text,
                reply_markup=get_rating_keyboard()
            )
        elif profile.photo_id:
            await bot.send_photo(
                chat_id=user_telegram_id,
                photo=profile.photo_id,
                caption=profile_text,
                reply_markup=get_rating_keyboard()
            )
        else:
            await bot.send_message(
                chat_id=user_telegram_id,
                text=profile_text,
                reply_markup=get_rating_keyboard()
            )
    else:
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏", show_alert=True)

@router.message(F.text == 'üéâ –ö—Ç–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å?')
async def show_winner(message: Message):
    if message.from_user.id != 1653541807:
        await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É")
        return
    winner = await get_winner_profile()
    if not winner or not winner.user:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –∞–Ω–∫–µ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è")
        return

    ratings = winner.received_ratings
    if not ratings:
        ratings = []
    elif not isinstance(ratings, list):
        ratings = [ratings]
    avg_rating = sum(r.score for r in ratings) / len(ratings) if ratings else 0

    profile_text = build_profile_text_for_caption([
        f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å!\n\n",
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {get_display_username(winner.user.username)}\n",
        f"‚≠êÔ∏è –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {round(avg_rating, 2)}\n",
        f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: {len(ratings)}\n",
        f"‚ú® –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {winner.category}\n",
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {winner.description}"
    ], for_caption=True)
    if winner.video_id:
        await message.answer_video(video=winner.video_id, caption=profile_text)
    elif winner.photo_id:
        await message.answer_photo(photo=winner.photo_id, caption=profile_text)
    else:
        # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–∏–º –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π –ª–∏–º–∏—Ç
        await message.answer(text=build_profile_text_for_caption([
            f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å!\n\n",
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {get_display_username(winner.user.username)}\n",
            f"‚≠êÔ∏è –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {round(avg_rating, 2)}\n",
            f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: {len(ratings)}\n",
            f"‚ú® –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {winner.category}\n",
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {winner.description}"
        ], for_caption=False))























































