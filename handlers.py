from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards import get_main_keyboard, get_rating_keyboard, get_profile_verification_keyboard, get_profile_edit
import asyncio
import logging
from datetime import datetime
from database import (
    get_user, create_user, create_profile, get_random_profile,
    create_rating, delete_ex_profiles, get_profile_info, get_user_profile
)
logger = logging.getLogger(__name__)
router = Router()
class ProfileStates(StatesGroup):
    waiting_for_description = State()
    waiting_for_video = State()

class RatingStates(StatesGroup):
    waiting_for_rating = State()
    waiting_for_comment = State()

@router.message(Command('start'))
async def start(message: Message):
    user = await get_user(message.from_user.id)
    if not user:
        user = await create_user(message.from_user.id, message.from_user.username)

    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∞–Ω–∫–µ—Ç! üéâ\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É –∏–ª–∏ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—ã –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                         reply_markup=get_main_keyboard())

@router.message(F.text == 'üìù –°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É')
async def create_profile_start(message: Message, state: FSMContext):
    await state.set_state(ProfileStates.waiting_for_description)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã:")

@router.message(ProfileStates.waiting_for_description)
async def process_description(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã.")
        return
    await state.update_data(description=message.text)
    await state.set_state(ProfileStates.waiting_for_video)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã:")

@router.message(ProfileStates.waiting_for_video, F.video)
async def process_video(message: Message, state: FSMContext):
    data = await state.get_data()
    if not data or 'description' not in data:
        logger.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏')
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ.')
        await state.clear()
        return

    user = await get_user(message.from_user.id)
    if not user:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã: {message.from_user.id}")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        await state.clear()
        return

    video = message.video
    if not video:
        logger.error("–û–±—ä–µ–∫—Ç –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ.")
        return

    if video.file_size > 50*1024*1024 or video.duration>240:
        await message.answer(
            "‚ö†Ô∏è –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∏–ª–∏ –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50 –ú–ë –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 4 –º–∏–Ω—É—Ç—ã\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ."
        )
        return

    video_id = video.file_id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω file_id –≤–∏–¥–µ–æ: {video_id}, —Ç–∏–ø: {type(video_id)}")
    # if hasattr(video, 'thumbnail') and video.thumbnail:
    #     photo_id = video.thumbnail.file_id
    if not video_id:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å file_id –∏–∑ –≤–∏–¥–µ–æ")
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ."
        )
        return

    profile = await create_profile(
        user_id=user.id,
        description=data['description'],
        video_id=video_id,
    )
    delete_at, days = await get_profile_info(profile.id)
    await state.clear()
    await message.answer(
        "–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é! "
        f"–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ –ª–µ–Ω—Ç–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏.\n\n"
        f"‚ö†Ô∏è –ê–Ω–∫–µ—Ç–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ {days} –¥–Ω–µ–π"
        f"({delete_at.strftime('%d.%m.%Y %H:%M')})",
        reply_markup=get_main_keyboard()
    )

@router.message(F.text=="üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞")
async def show_profile(message: Message):
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã.\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –µ—ë, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É 'üìù –°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É'",
            reply_markup=get_main_keyboard()
        )
    profile = await get_user_profile(message.from_user.id)
    if not profile:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã.\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –µ—ë, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É 'üìù –°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É'",
            reply_markup=get_main_keyboard()
        )
    delete_at, days = await get_profile_info(profile.id)
    ratings = profile.received_ratings
    avg_rating = sum(r.score for r in ratings)/len(ratings) if ratings else 0
    status_text = "‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞" if profile.is_verified else "‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
    profile_text = (
        f"üë§ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:\n\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {profile.description}\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {status_text}\n"
        f"‚≠êÔ∏è –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {round(avg_rating, 1)}\n"
        f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: {len(ratings)}\n"
        f"‚è≥ –î–Ω–µ–π –¥–æ —É–¥–∞–ª–µ–Ω–∏—è: {days}\n"
        f"üóì –î–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∏—è: {delete_at.strftime('%d.%m.%Y %H:%M')}"
    )

    if profile.video_id and profile.video_id.strip():
        await message.answer_video(video=profile.video_id, caption=profile_text, reply_markup=get_profile_edit())
    else:
        logger.info("–ù–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
        await message.answer(
            profile_text,
            reply_markup=get_profile_edit()
        )



